const Point = require("./Point");
const Cube = require("./Cube");

/**
 * Canvas Element
 */
class Elem {
    /**
     * Create Canvas Element
     * @param {string} type 
     * @param {string} tag 
     */
    constructor(type, tag) {
        let elementTypes = {
            "box":"div",
            "text":"p"
        }

        /** @type {string} */
        this.tag = tag;

        /** @type {Element} */
        this.element = document.createElement(elementTypes[type]);

        this.events = {};
        this.events.styled = () => {};
        this.events.moved = () => {};
        this.events.resized = () => {};
        this.events.edited = () => {};

        this.element.setAttribute("id", tag);
        this.element.style.position = "absolute";
        this.size({ height:"100px", width:"100px" });
        this.move({ x:"0px", y:"0px" });
    }

    /**
     * Change the styling of the Element
     * @param {string[][]} style Object
     * @description Example Input: [["background", "pink"], ["color", "blue"]]
     */
    style(style) {
        for (let i = 0; i < style.length; i++) {
            this.element.style.setProperty(style[i][0], style[i][1]);
        }

        this.events.styled(style);
    }

    /**
     * Change Element Size
     * @param {object} resolution Height and Width
     * @description Example Input: { height:"100px", width:"100px" }
     */
    size(resolution) {
        if (resolution.width != undefined) this.element.style.width = resolution.width;
        if (resolution.height != undefined) this.element.style.height = resolution.height;

        this.events.resized(resolution);
    }

    /**
     * Move Canvas Element
     * @param {object} amount X and Y
     * @description Example Input: { x:"36px", y: "64px" }
     */
    move(amount) {
        if (amount.x != undefined) this.element.style.left = amount.x;
        if (amount.y != undefined) this.element.style.top = amount.y;

        this.events.moved(amount);
    }

    /**
     * Change Text Content of Element
     * @param {string} text 
     */
    content(text) {
        this.element.textContent = text;

        this.events.edited(text);
    }

    /**
     * Get the Width and Height of the Element (In Pixels)
     * @returns {Cube} X, Y and Z
     */
    getSize() {
        let x = parseInt(this.element.offsetWidth, 10);
        let y = parseInt(this.element.offsetHeight, 10);
        return new Cube(x, y);
    }

    /**
     * Get the X and Y position of the Element
     * @returns {Point} X, Y and Z
     */
    getPos() {
        let x = parseInt(this.element.style.left, 10);
        let y = parseInt(this.element.style.top, 10);
        return new Point(x, y);
    }

    /**
     * Execute Function on Event
     * @param {string} event Event to Perform to
     * @param {function} action Function to run
     */
    on(event, action) {
        switch (event) {
            case "styled":
                this.events.styled = action;
                break;
            case "moved":
                this.events.moved = action;
                break;
            case "resized":
                this.events.resized = action;
                break;
            case "edited":
                this.events.edited = action;
                break;
        }
    }
}

module.exports = Elem;